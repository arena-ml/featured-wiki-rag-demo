# Base Image
FROM nvidia/cuda:12.8.0-base-ubuntu24.04

# Set environment variables for optimization
# KMP_DUPLICATE_LIB_OK is set to avoid duplicate dylib issue , for now
ENV PYTHONUNBUFFERED=1 \
    PYTHONOPTIMIZE=1 \
    PIP_NO_CACHE_DIR=1 \
    FORCE_CMAKE=1 \
    KMP_DUPLICATE_LIB_OK=TRUE 


# Install required packages for build
RUN apt-get update && apt-get install -y --no-install-recommends \
    libomp-dev \
    python3 \
    python3-pip \
    build-essential \
    libjpeg-dev \
    zlib1g-dev \
    python3-dev \
    ninja-build \
    libclblast-dev \
    libopenblas-dev \
    libomp-dev \
    libgomp1 \
    wget \
    git \
    curl 


# install llama cpp's python bindings
RUN CMAKE_ARGS="-DGGML_NATIVE=OFF -DCMAKE_CXX_FLAGS="-march=native" -DCMAKE_C_FLAGS="-march=native" -DGGML_CPU_ARM_ARCH=native" \
 pip install  --verbose --break-system-packages llama-cpp-python --extra-index-url https://abetlen.github.io/llama-cpp-python/whl/cuda125

# for required packages
COPY requirements.txt requirements.txt

RUN pip install --no-cache-dir --upgrade  --break-system-packages -r requirements.txt


# Create a directory to save the model
RUN mkdir -p /app/jinv3

# Add a Python script that downloads the model
COPY saveModels.py saveModels.py

RUN python3 saveModels.py

# Download model files with robust error handling
RUN curl -o /app/Phi-3.5-mini-instruct-Q6_K.gguf -L "https://huggingface.co/bartowski/Phi-3.5-mini-instruct-GGUF/resolve/main/Phi-3.5-mini-instruct-Q6_K.gguf" || \
    { echo "Failed to download llm model" && exit 1; }

# Remove Clang, LLVM, and other build tools to reduce image size
RUN apt-get purge -y clang lld llvm build-essential && \
    apt-get autoremove -y && \
    apt-get clean -y && \
    rm -rf /root/.cache /tmp/* /var/tmp/*




